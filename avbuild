#!/bin/bash
# avbuild - download and build audio/video command line tools
#
# Version 0.14.0 (2017-04-09)
# Update to cmake 3.7.2, fdk-aac 0.1.5, libav 12.0, libflac 1.3.2,
# libopus 1.1.4, libvorbis 1.3.5, libvpx 1.6.1, opencore amr 0.1.5,
# pkg-config 0.29.2, x264 core 148 r2708 (86b7198), x265 2.3, zlib 1.2.11.
#
# Version 0.13.0 (2015-12-29)
# Update to libopus 1.1.1, libvpx 1.5.0.
#
# Version 0.12.1 (2015-10-04)
# Restore make command for libav.
#
# Version 0.12.0 (2015-10-03)
# Use system autotools and cmake by default. Add -c to build cmake, -t to build
# autoconf, automake, and libtool. Add logging. Update to cmake 3.3.2 and
# libvpx 1.4.0. Fix typo in help. Quote variables in comparisons.
#
# Version 0.11.0 (2015-09-07)
# Rename project to avbuild (previously av-build). Update to cmake 3.3.1,
# fdk-aac 0.1.4, x264 core 148, x265 1.7, libav 11.4. Minor tweaks.
#
# Version 0.10.0 (2015-03-16)
# Update libav release to 11.3.
#
# Version 0.9.0 (2015-03-04)
# Add -x to use latest repository version of x264, x265, and libav. Use https where
# possible (unfortunately not everywhere). Use xz for libav release.
#
# Version 0.8.0 (2015-02-26)
# Apply datetime stamp to build directory instead of base. Add directory empty check.
# Re-download invalid source files. Improve usage and progress displays, error handling.
#
# Version 0.7.0 (2015-02-26)
# Add autotools, opus, and speex. Use xz compressed sources where possible.
#
# Version 0.6.0 (2015-02-24)
# Add -l to list sources without building. Rename some vars. Refactor some commands.
# Fix x264 to core 142.
#
# Version 0.5.0 (2015-02-19)
# Add -d to redownload, -f to overwrite destination, and -s to append date.
# Fix missing script name. Remove final binary check.
#
# Version 0.4.0 (2015-02-19)
# Add basic arguments, number of parallel jobs fallback, and make sourcing compatible.
#
# Version 0.3.0 (2015-02-19)
# Libav building successfully. Rename avconv-build -> av-build.
#
# Version 0.2.0 (2015-02-18)
# All primary contribs added and building successfully.
#
# Version 0.1.0 (2015-02-17)
# Initial development.

avbuild() {

    VERSION="avbuild 0.14.0"
    DOWNLOADS=('https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz' \
               'https://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz' \
               'http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz' \
               'http://zlib.net/zlib-1.2.11.tar.gz' \
               'http://downloads.xiph.org/releases/flac/flac-1.3.2.tar.xz' \
               'http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz' \
               'http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.xz' \
               'http://downloads.xiph.org/releases/opus/opus-1.1.4.tar.gz' \
               'https://ftp.mozilla.org/pub/mozilla.org/opus/opus-tools-0.1.9.tar.gz' \
               'http://downloads.xiph.org/releases/speex/speex-1.2rc1.tar.gz' \
               'http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.5.tar.xz' \
               'https://storage.googleapis.com/downloads.webmproject.org/releases/webm/libvpx-1.6.1.tar.bz2' \
               'http://downloads.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-0.1.5.tar.gz' \
               'http://downloads.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.5.tar.gz')
    CMAKE='http://www.cmake.org/files/v3.7/cmake-3.7.2.tar.gz'
    AUTOTOOLS=('https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz' \
               'https://ftp.gnu.org/gnu/automake/automake-1.15.tar.xz' \
               'https://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.xz')
    X264_RELEASE='https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-20160920-2245-stable.tar.bz2'
    X264_VERSION="148"
    X264_LATEST='https://download.videolan.org/pub/videolan/x264/snapshots/last_x264.tar.bz2'
    X265_RELEASE='https://bitbucket.org/multicoreware/x265/downloads/x265_2.3.tar.gz'
    X265_LATEST='https://bitbucket.org/multicoreware/x265/get/default.tar.bz2'
    LIBAV_RELEASE='https://libav.org/releases/libav-12.tar.xz'
    LIBAV_LATEST='https://libav.org/releases/libav-snapshot.tar.bz2'

    # Internal vars
    SELF="${BASH_SOURCE[0]}"
    SELF_NAME=$(basename "${SELF}")
    CREL=$(echo -e "\r"$(tput el))
    DATETIME=$(date +%Y%m%d%H%M%S)
    HELP="\
usage: $SELF_NAME [-hv]
       $SELF_NAME [-cdflstx] [target_dir]
where:
   -h  display this help text
   -v  display version information
   -c  build cmake
   -d  force re-download existing source files
   -f  force overwrite existing directory
   -l  list sources (do not build)
   -s  append datetime stamp to target_dir/avbuild
   -t  build autoconf, automake, and libtool
   -x  use latest repository version of libav, x264, and x265"

    # Arguments
    DOWNLOAD=false
    FORCE=false
    LIST=false
    STAMP=false
    LATEST=false
    OPTIND=1
    while getopts ":hvcdflstx" OPT; do
        case "${OPT}" in
        h)
            # Print help and exit
            echo -e "${HELP}"
            return 0
            ;;
        v)
            # Print version and exit
            echo "${VERSION}"
            return 0
            ;;
        c)
            # Use local cmake
            LOCAL_CMAKE=true
            ;;
        d)
            # Force re-download existing source files
            DOWNLOAD=true
            ;;
        f)
            # Force overwrite existing build directory
            FORCE=true
            ;;
        l)
            # List sources
            LIST=true
            ;;
        s)
            # Append datetime to build directory
            STAMP=true
            ;;
        t)
            # Use local autotools and pkg-config
            LOCAL_AUTOTOOLS=true
            ;;
        x)
            # Use latest repository versions
            LATEST=true
            ;;
        \?)
            # Invalid option specified
            echo "${SELF_NAME}: invalid option: -${OPTARG}" >&2
            echo -e "${HELP}"
            return 1
            ;;
        :)
            # Option without required argument
            echo "${SELF_NAME}: option -${OPTARG} requires a value" >&2
            echo -e "${HELP}"
            return 1
            ;;
        esac
    done
    shift $(($OPTIND - 1))

    # Assemble download list
    SOURCE_URLS=()
    if [[ "${LOCAL_AUTOTOOLS}" == true ]]; then
        SOURCE_URLS+=("${AUTOTOOLS[@]}")
    fi
    if [[ "${LOCAL_CMAKE}" == true ]]; then
        SOURCE_URLS+=("${CMAKE}")
    fi
    SOURCE_URLS+=("${DOWNLOADS[@]}")
    if [[ "${LATEST}" == true ]]; then
        SOURCE_URLS+=("${X264_LATEST}")
        SOURCE_URLS+=("${X265_LATEST}")
        SOURCE_URLS+=("${LIBAV_LATEST}")
    else
        SOURCE_URLS+=("${X264_RELEASE}")
        SOURCE_URLS+=("${X265_RELEASE}")
        SOURCE_URLS+=("${LIBAV_RELEASE}")
    fi

    # Source file and directory names
    for INDEX in "${!SOURCE_URLS[@]}"; do
        SOURCE_FILES[INDEX]="${SOURCE_URLS[INDEX]##*/}"
        case "${SOURCE_URLS[INDEX]}" in
            *libvpx*)
                SOURCE_FILES[INDEX]=$(echo "${SOURCE_FILES[INDEX]}" | sed -e 's/^v/libvpx-/')
                ;;
            *x264*)
                SOURCE_FILES[INDEX]=$(echo "${SOURCE_FILES[INDEX]}" | sed -E -e "s/snapshot-[0-9]+/core-${X264_VERSION}/")
                SOURCE_FILES[INDEX]=$(echo "${SOURCE_FILES[INDEX]}" | sed -E -e "s/last_x264/x264-latest/")
                ;;
            *x265*)
                SOURCE_FILES[INDEX]=$(echo "${SOURCE_FILES[INDEX]}" | sed -E -e "s/default/x265-latest/")
                ;;
            *libav*)
                SOURCE_FILES[INDEX]=$(echo "${SOURCE_FILES[INDEX]}" | sed -E -e "s/snapshot/latest/")
                ;;
        esac
        SOURCE_NAMES[INDEX]=$(echo -n "${SOURCE_FILES[INDEX]}" | sed -E -e 's/\.[Tt][Aa][Rr]\.[A-Za-z0-9]+$//')
        SOURCE_HUMAN[INDEX]=$(echo -n "${SOURCE_NAMES[INDEX]}" | sed -E -e 's/[_-]([0-9]|core)/ \1/g' | sed -e 's/-latest/ latest/')
    done

    if [[ "${LIST}" == true ]]; then
        # List sources
        IFS=$'\n' SOURCE_HUMAN_SORTED=$(sort <<<"${SOURCE_HUMAN[*]}")
        printf "%s\n" "${SOURCE_HUMAN_SORTED[@]}"

    else
        # Build sources
        # Base directory
        BASE_DIR=""
        if [[ -n ${1} ]]; then
            BASE_DIR="${1}"
        else
            BASE_DIR="avbuild"
        fi
        if [[ "${FORCE}" != true ]] && [[ -e ${BASE_DIR} ]] && [[ $(ls -A ${BASE_DIR} | grep -v '^\.') ]]; then
            echo "${SELF_NAME}: directory exists and is not empty: ${BASE_DIR}" >&2
            return 1
        elif ! mkdir -p "${BASE_DIR}" >/dev/null 2>&1; then
            echo "${SELF_NAME}: unable to create directory: ${BASE_DIR}" >&2
            return 1
        fi
        BASE_DIR=$(cd "${BASE_DIR}" && pwd)

        # Set up environment
        DOWNLOAD_DIR="${BASE_DIR}/download"
        BUILD_DIR="${BASE_DIR}/avbuild"
        if [[ "${STAMP}" == true ]]; then
            BUILD_DIR="${BUILD_DIR}-${DATETIME}"
        fi
        SOURCE_DIR="${BUILD_DIR}/source"
        LOG_DIR="${BUILD_DIR}/log"
        if [[ "${FORCE}" == true ]] && [[ -e ${BUILD_DIR} ]]; then
            rm -rf ${BUILD_DIR}
        fi
        mkdir -p ${DOWNLOAD_DIR}
        mkdir -p ${BUILD_DIR}
        mkdir -p ${SOURCE_DIR}
        mkdir -p ${LOG_DIR}
        export PATH="${BUILD_DIR}/bin:${PATH}"
        LIBAV_CONFIGURE_EXTRA=""
        if [[ "$(uname)" == "Darwin" ]]; then
            LIBAV_CONFIGURE_EXTRA="--enable-cross-compile --target-os=darwin"
        fi
        if ! MAKEJOBS=$(sysctl -n hw.ncpu 2>/dev/null); then
            MAKEJOBS="4"
        fi

        # Commands
        for INDEX in "${!SOURCE_URLS[@]}"; do
            SOURCE_COMMANDS[INDEX]=""
            SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}mkdir -p ${SOURCE_DIR}/${SOURCE_NAMES[INDEX]};"
            SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}cd ${SOURCE_DIR}/${SOURCE_NAMES[INDEX]};"
            SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}tar xf ${DOWNLOAD_DIR}/${SOURCE_FILES[INDEX]} --strip-components 1;"
            case "${SOURCE_NAMES[INDEX]}" in
                *autoconf*|*automake*|*libtool*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR};"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *pkg-config*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --with-internal-glib;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}export PKG_CONFIG_PATH=${BUILD_DIR}/lib/pkgconfig;"
                    ;;
                *cmake*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --no-qt-gui;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *yasm*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR};"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *bzip2*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install PREFIX=${BUILD_DIR};"
                    ;;
                *zlib*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install"
                    ;;
                *flac*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --disable-asm-optimizations --disable-xmms-plugin --with-ogg-includes=${BUILD_DIR}/include --with-ogg-libraries=${BUILD_DIR}/lib --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *fdk-aac*|*lame*|*ogg*|*opencore-amr*|*opus*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *speex*|*vorbis*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --with-ogg-includes=${BUILD_DIR}/include --with-ogg-libraries=${BUILD_DIR}/lib --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *vpx*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --enable-vp8 --enable-vp9 --enable-multithread --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *x264*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --disable-avs --disable-ffms --disable-gpac --disable-lavf --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *x265*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}cd source;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}cmake -DCMAKE_INSTALL_PREFIX:PATH=${BUILD_DIR} -DENABLE_SHARED=OFF .;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    # https://gitlab.kitware.com/brad.king/cmake/commit/53f17333f830d4f314bbe10ba32889bbcfbc3c46
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}sed -i.bak -e '/\-lto_library/s///g' ${BUILD_DIR}/lib/pkgconfig/x265.pc;"
                    ;;
                *libav*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --arch=$(uname -m) --extra-cflags=-I${BUILD_DIR}/include --extra-ldflags=-L${BUILD_DIR}/lib --pkg-config-flags=--static --as=yasm --disable-debug --disable-shared --enable-static --enable-runtime-cpudetect --enable-gpl --enable-version3 --enable-nonfree --enable-pthreads --enable-bzlib --enable-zlib --enable-libmp3lame --enable-libfdk-aac --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopus --enable-libspeex --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 ${LIBAV_CONFIGURE_EXTRA};"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
            esac
        done

        # Download
        cd ${DOWNLOAD_DIR}
        ERRORS=()
        for INDEX in "${!SOURCE_URLS[@]}"; do
            echo -en "${CREL}"
            printf "Downloading [%02i/%02i] %s" "$((${INDEX}+1))" "${#SOURCE_URLS[@]}" "${SOURCE_FILES[INDEX]}"
            if [[ "${DOWNLOAD}" == true ]] || [[ ! -e "${SOURCE_FILES[INDEX]}" ]] || ! tar -tf "${SOURCE_FILES[INDEX]}" >/dev/null 2>&1; then
                if ! curl -Ls "${SOURCE_URLS[INDEX]}" -o "${SOURCE_FILES[INDEX]}" 2>/dev/null; then
                    ERRORS+=("${SOURCE_URLS[INDEX]}")
                    echo -en " [FAIL]\n"
                fi
            fi
        done
        echo -en "${CREL}"
        if [[ ${#ERRORS[@]} -gt 0 ]]; then
            echo -e "${SELF_NAME}: unable to download: ${ERRORS[*]}" >&2
            return 1
        fi
        printf "Downloading [%02i/%02i] complete.\n" "$((${INDEX}+1))" "${#SOURCE_URLS[@]}"

        # Build
        for INDEX in "${!SOURCE_NAMES[@]}"; do
            echo -en "${CREL}"
            printf "Building    [%02i/%02i] %s" "$((${INDEX}+1))" "${#SOURCE_NAMES[@]}" "${SOURCE_HUMAN[INDEX]}"
            if [[ "${SOURCE_COMMANDS[INDEX]}" != "" ]]; then
                COMMANDS=()
                IFS=';' read -a COMMANDS <<< "${SOURCE_COMMANDS[INDEX]}"
                for C in "${COMMANDS[@]}"; do
                    if eval $(echo -e "${C}") >> "${LOG_DIR}/${SOURCE_NAMES[INDEX]}.log" 2>&1; then
                        continue
                    else
                        echo -en " [FAIL]\n"
                        echo -e "${SELF_NAME}: unable to build: ${SOURCE_HUMAN[INDEX]}" >&2
                        return 1
                    fi
                done
            fi
        done
        echo -en "${CREL}"
        printf "Building    [%02i/%02i] complete.\n" "$((${INDEX}+1))" "${#SOURCE_HUMAN[@]}"

    fi

    # All done
    return 0

}

avbuild "$@"
