#!/bin/bash
# av-build - download and build audio/video command line tools
#
# Version 0.7.0 (2015-02-26)
# Add autotools, opus, and speex. Use xz compressed sources where possible.
#
# Version 0.6.0 (2015-02-24)
# Add -l to list sources without building. Rename some vars. Refactor some commands.
# Fix x264 to core 142.
#
# Version 0.5.0 (2015-02-19)
# Add -d to redownload, -f to overwrite destination, and -s to append date.
# Fix missing script name. Remove final binary check.
#
# Version 0.4.0 (2015-02-19)
# Add basic arguments, number of parallel jobs fallback, and make sourcing compatible.
#
# Version 0.3.0 (2015-02-19)
# Libav building successfully. Rename avconv-build -> av-build.
#
# Version 0.2.0 (2015-02-18)
# All primary contribs added and building successfully.
#
# Version 0.1.0 (2015-02-17)
# Initial development.

av-build() {

    VERSION="av-build 0.7.0"
    SOURCE_URLS=('http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz' \
                 'http://ftp.gnu.org/gnu/automake/automake-1.15.tar.xz' \
                 'http://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.xz' \
                 'http://pkgconfig.freedesktop.org/releases/pkg-config-0.28.tar.gz' \
                 'http://www.cmake.org/files/v3.1/cmake-3.1.3.tar.gz' \
                 'http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz' \
                 'http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz' \
                 'http://zlib.net/zlib-1.2.8.tar.gz' \
                 'http://downloads.xiph.org/releases/flac/flac-1.3.1.tar.xz' \
                 'http://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz' \
                 'http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.xz' \
                 'http://downloads.xiph.org/releases/opus/opus-1.1.tar.gz' \
                 'https://ftp.mozilla.org/pub/mozilla.org/opus/opus-tools-0.1.9.tar.gz' \
                 'http://downloads.xiph.org/releases/speex/speex-1.2rc1.tar.gz' \
                 'http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.4.tar.xz' \
                 'https://github.com/webmproject/libvpx/archive/v1.3.0.tar.gz' \
                 'http://downloads.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-0.1.3.tar.gz' \
                 'http://downloads.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.3.tar.gz' \
                 'http://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-20141218-2245.tar.bz2' \
                 'https://bitbucket.org/multicoreware/x265/downloads/x265_1.5.tar.gz' \
                 'https://libav.org/releases/libav-11.2.tar.gz')
    X264_VERSION="142"

    # Internal vars
    SELF="${BASH_SOURCE[0]}"
    SELF_NAME=$(basename "${SELF}")
    DATETIME=$(date +%Y-%m-%d-%H%M%S)
    HELP="\
usage: $SELF_NAME [-hv]
       $SELF_NAME [-dfls] [directory]
where:
   -h  display this help text
   -v  display version information
   -d  force redownload existing source files
   -f  force overwrite existing directory
   -l  list sources (do not build)
   -s  append date/time stamp to directory"

    # Arguments
    DOWNLOAD=false
    FORCE=false
    LIST=false
    STAMP=false
    OPTIND=1
    while getopts ":hvdfls" OPT; do
        case "${OPT}" in
        h)
            # Print help and exit
            echo -e "${HELP}"
            return 0
            ;;
        v)
            # Print version and exit
            echo "${VERSION}"
            return 0
            ;;
        d)
            # Force redownload existing source files
            DOWNLOAD=true
            ;;
        f)
            # Force overwrite existing build directory
            FORCE=true
            ;;
        l)
            # List sources
            LIST=true
            ;;
        s)
            # Append date to build directory
            STAMP=true
            ;;
        \?)
            # Invalid option specified
            echo "${SELF_NAME}: invalid option: -${OPTARG}" >&2
            echo -e "${HELP}"
            return 1
            ;;
        :)
            # Option without required argument
            echo "${SELF_NAME}: option -${OPTARG} requires a value" >&2
            echo -e "${HELP}"
            return 1
            ;;
        esac
    done
    shift $(($OPTIND - 1))

    # Source file and directory names
    for INDEX in "${!SOURCE_URLS[@]}"; do
        SOURCE_FILES[INDEX]="${SOURCE_URLS[INDEX]##*/}"
        case "${SOURCE_URLS[INDEX]}" in
            *libvpx*)
                SOURCE_FILES[INDEX]=$(echo "${SOURCE_FILES[INDEX]}" | sed -e 's/^v/libvpx-/')
                ;;
            *x264*)
                SOURCE_FILES[INDEX]=$(echo "${SOURCE_FILES[INDEX]}" | sed -E -e "s/snapshot-[0-9]+/core-${X264_VERSION}/")
                ;;
        esac
        SOURCE_NAMES[INDEX]=$(echo -n "${SOURCE_FILES[INDEX]}" | sed -E -e 's/\.[Tt][Aa][Rr]\.[A-Za-z0-9]+$//')
        SOURCE_HUMAN[INDEX]=$(echo -n "${SOURCE_NAMES[INDEX]}" | sed -E -e 's/[_-]([0-9]|core)/ \1/g')
    done

    if [[ ${LIST} == true ]]; then
        # List sources
        IFS=$'\n' SOURCE_HUMAN_SORTED=$(sort <<<"${SOURCE_HUMAN[*]}")
        printf "%s\n" "${SOURCE_HUMAN_SORTED[@]}"

    else
        # Build sources
        # Base directory
        BASE_DIR=""
        if [[ -n ${1} ]]; then
            BASE_DIR="${1}"
        else
            BASE_DIR="av-build"
        fi
        if [[ ${STAMP} == true ]]; then
            BASE_DIR="${BASE_DIR}_${DATETIME}"
        fi
        if [[ ${FORCE} != true ]] && [[ -e ${BASE_DIR} ]]; then
            echo "${SELF_NAME}: directory exists: ${BASE_DIR}" >&2
            return 1
        elif ! mkdir -p "${BASE_DIR}" >/dev/null 2>&1; then
            echo "${SELF_NAME}: unable to create directory: ${BASE_DIR}" >&2
            return 1
        fi
        echo -n "Creating destination..."
        BASE_DIR=$(cd "${BASE_DIR}" && pwd)
        echo " done."

        # Set up environment
        DOWNLOAD_DIR="${BASE_DIR}/download"
        BUILD_DIR="${BASE_DIR}/build"
        SOURCE_DIR="${BUILD_DIR}/source"
        if [[ ${FORCE} == true ]] && [[ -e ${BUILD_DIR} ]]; then
            rm -rf ${BUILD_DIR}
        fi
        mkdir -p ${DOWNLOAD_DIR}
        mkdir -p ${BUILD_DIR}
        mkdir -p ${SOURCE_DIR}
        export PATH="${BUILD_DIR}/bin:${PATH}"
        if ! MAKEJOBS=$(sysctl -n hw.ncpu 2>/dev/null); then
            MAKEJOBS="4"
        fi

        # Commands
        for INDEX in "${!SOURCE_URLS[@]}"; do
            SOURCE_COMMANDS[INDEX]=""
            SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}mkdir -p ${SOURCE_DIR}/${SOURCE_NAMES[INDEX]};"
            SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}cd ${SOURCE_DIR}/${SOURCE_NAMES[INDEX]};"
            SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}tar xf ${DOWNLOAD_DIR}/${SOURCE_FILES[INDEX]} --strip-components 1;"
            case "${SOURCE_NAMES[INDEX]}" in
                *autoconf*|*automake*|*libtool*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR};"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *pkg-config*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --with-internal-glib;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}export PKG_CONFIG_PATH=${BUILD_DIR}/lib/pkgconfig;"
                    ;;
                *cmake*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --no-qt-gui;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *yasm*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR};"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *bzip2*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install PREFIX=${BUILD_DIR};"
                    ;;
                *zlib*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install"
                    ;;
                *flac*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --disable-asm-optimizations --disable-xmms-plugin --with-ogg-includes=${BUILD_DIR}/include --with-ogg-libraries=${BUILD_DIR}/lib --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *fdk-aac*|*lame*|*ogg*|*opencore-amr*|*opus*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *speex*|*vorbis*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --with-ogg-includes=${BUILD_DIR}/include --with-ogg-libraries=${BUILD_DIR}/lib --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *vpx*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --enable-vp8 --enable-vp9 --enable-multithread --disable-shared --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *x264*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --disable-avs --disable-ffms --disable-gpac --disable-lavf --enable-static;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *x265*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}cd source;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}cmake -DCMAKE_INSTALL_PREFIX:PATH=${BUILD_DIR} -DENABLE_SHARED=OFF .;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
                *libav*)
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}./configure --prefix=${BUILD_DIR} --extra-cflags='-I${BUILD_DIR}/include' --extra-ldflags='-L${BUILD_DIR}/lib' --pkg-config-flags='--static' --disable-debug --enable-gpl --enable-version3 --enable-nonfree --enable-bzlib --enable-zlib --enable-libmp3lame --enable-libfdk-aac --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopus --enable-libspeex --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265;"
                    SOURCE_COMMANDS[INDEX]="${SOURCE_COMMANDS[INDEX]}make -j ${MAKEJOBS} && make install;"
                    ;;
            esac
        done

        # Download
        echo -n "Downloading sources..."
        cd ${DOWNLOAD_DIR}
        ERROR_MSG=""
        for INDEX in "${!SOURCE_URLS[@]}"; do
            if [[ ${DOWNLOAD} == true ]] || [[ ! -e "${SOURCE_FILES[INDEX]}" ]]; then
                if ! curl -Ls "${SOURCE_URLS[INDEX]}" -o "${SOURCE_FILES[INDEX]}" 2>/dev/null; then
                    ERROR_MSG="${ERROR_MSG}${SELF_NAME}: unable to download source: ${SOURCE_URLS[INDEX]}\n"
                fi
            fi
        done
        if [[ "${ERROR_MSG}" != "" ]]; then
            echo " failed."
            echo -en "${ERROR_MSG}" >&2
            return 1
        fi
        echo " done."

        # Build
        echo "Building..."
        for INDEX in "${!SOURCE_NAMES[@]}"; do
            echo -n "- ${SOURCE_HUMAN[INDEX]}"
            if [[ "${SOURCE_COMMANDS[INDEX]}" != "" ]]; then
                COMMANDS=()
                IFS=';' read -a COMMANDS <<< "${SOURCE_COMMANDS[INDEX]}"
                for C in "${COMMANDS[@]}"; do
                    #if eval $(echo -e "${C}"); then
                    if eval $(echo -e "${C}") >/dev/null 2>&1; then
                        continue
                    else
                        echo " (fail)"
                        echo "${SELF_NAME}: unable to build source: ${SOURCE_NAMES[INDEX]}" >&2
                        return 1
                    fi
                done
            fi
            echo " (pass)"
        done
        echo "Build complete."

    fi

    # All done
    return 0

}

av-build "$@"
